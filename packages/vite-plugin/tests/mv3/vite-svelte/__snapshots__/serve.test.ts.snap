// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`serve fs output: _00 manifest.json 1`] = `
Object {
  "action": Object {
    "default_popup": "src/popup.html",
  },
  "background": Object {
    "service_worker": "service-worker-loader.js",
    "type": "module",
  },
  "content_scripts": Array [
    Object {
      "js": Array [
        "assets/content-script-loader.content.js.js",
      ],
      "matches": Array [
        "http://*/*",
      ],
    },
  ],
  "manifest_version": 3,
  "name": "test extension",
  "version": "1.0.0",
  "web_accessible_resources": Array [
    Object {
      "matches": Array [
        "<all_urls>",
      ],
      "resources": Array [
        "*",
        "**/*",
      ],
      "use_dynamic_url": true,
    },
  ],
}
`;

exports[`serve fs output: _01 output files 1`] = `
Array [
  "assets/content-script-loader.content.js.js",
  "assets/crx-client-port.js",
  "assets/precontroller.js.js",
  "assets/webcomponents-custom-elements-z7FmG.js",
  "favicon.ico",
  "manifest.json",
  "service-worker-loader.js",
  "src/App.svelte.js",
  "src/App.svelte.style.js",
  "src/assets/svelte.png",
  "src/assets/svelte.png.js",
  "src/content.js",
  "src/lib/Counter.svelte.js",
  "src/lib/Counter.svelte.style.js",
  "src/popup.html",
  "vendor/deps/chunk-LXI2JGJY.js",
  "vendor/deps/svelte_internal.js",
  "vendor/svelte-hmr-runtime-hot-api-esm.js",
  "vendor/svelte-hmr-runtime-hot-api.js",
  "vendor/svelte-hmr-runtime-index.js",
  "vendor/svelte-hmr-runtime-overlay.js",
  "vendor/svelte-hmr-runtime-proxy-adapter-dom.js",
  "vendor/svelte-hmr-runtime-proxy.js",
  "vendor/svelte-hmr-runtime-svelte-hooks.js",
  "vendor/vite-client.mjs.js",
  "vendor/vite-env.mjs.js",
]
`;

exports[`serve fs output: _02 optimized deps 1`] = `
Set {
  "src/content.js",
  "src/popup.html",
}
`;

exports[`serve fs output: assets/content-script-loader.content.js.js 1`] = `
"(function () {
  'use strict';

  (async () => {
    if (\\"\\")
      await import(
        /* @vite-ignore */
        chrome.runtime.getURL(\\"\\")
      );
    await import(
      /* @vite-ignore */
      chrome.runtime.getURL(\\"vendor/vite-client.mjs.js\\")
    );
    await import(
      /* @vite-ignore */
      chrome.runtime.getURL(\\"src/content.js\\")
    );
  })().catch(console.error);

})();
"
`;

exports[`serve fs output: assets/crx-client-port.js 1`] = `
"function isCrxHMRPayload(x) {
  return x.type === \\"custom\\" && x.event.startsWith(\\"crx:\\");
}
class HMRPort {
  port;
  callbacks = /* @__PURE__ */ new Map();
  constructor() {
    setInterval(() => {
      try {
        this.port?.postMessage({ data: \\"ping\\" });
      } catch (error) {
        if (error instanceof Error && error.message.includes(\\"Extension context invalidated.\\")) {
          location.reload();
        } else
          throw error;
      }
    }, 5000);
    setInterval(this.initPort, 5 * 60 * 1e3);
    this.initPort();
  }
  initPort = () => {
    this.port?.disconnect();
    this.port = chrome.runtime.connect({ name: \\"@crx/client\\" });
    this.port.onDisconnect.addListener(this.handleDisconnect.bind(this));
    this.port.onMessage.addListener(this.handleMessage.bind(this));
    this.port.postMessage({ type: \\"connected\\" });
  };
  handleDisconnect = () => {
    if (this.callbacks.has(\\"close\\"))
      for (const cb of this.callbacks.get(\\"close\\")) {
        cb({ wasClean: true });
      }
  };
  handleMessage = (message) => {
    const forward = (data) => {
      if (this.callbacks.has(\\"message\\"))
        for (const cb of this.callbacks.get(\\"message\\")) {
          cb({ data });
        }
    };
    const payload = JSON.parse(message.data);
    if (isCrxHMRPayload(payload)) {
      if (payload.event === \\"crx:runtime-reload\\") {
        console.log(\\"[crx] runtime reload\\");
        setTimeout(() => location.reload(), 500);
      } else {
        forward(JSON.stringify(payload.data));
      }
    } else {
      forward(message.data);
    }
  };
  addEventListener = (event, callback) => {
    const cbs = this.callbacks.get(event) ?? /* @__PURE__ */ new Set();
    cbs.add(callback);
    this.callbacks.set(event, cbs);
  };
  send = (data) => {
    if (this.port)
      this.port.postMessage({ data });
    else
      throw new Error(\\"HMRPort is not initialized\\");
  };
}

export { HMRPort };
"
`;

exports[`serve fs output: assets/precontroller.js.js 1`] = `
"const id = setInterval(() => location.reload(), 100);
setTimeout(() => clearInterval(id), 5e3);
"
`;

exports[`serve fs output: service-worker-loader.js 1`] = `
"import 'http://localhost:3000/crx-client-worker';
"
`;

exports[`serve fs output: src/App.svelte.js 1`] = `
"import { createHotContext } from '../vendor/vite-client.mjs.js';
import '../vendor/deps/svelte_internal.js';
import logo from './assets/svelte.png.js';
import Counter from './lib/Counter.svelte.js';
import { applyHmr } from '../vendor/svelte-hmr-runtime-hot-api-esm.js';
import { adapter } from '../vendor/svelte-hmr-runtime-proxy-adapter-dom.js';
import './App.svelte.style.js';
import { element, space, create_component, text, src_url_equal, attr_dev, add_location, insert_dev, append_dev, mount_component, noop, transition_in, transition_out, detach_dev, destroy_component, dispatch_dev, validate_slots, SvelteComponentDev, init, safe_not_equal } from '../vendor/deps/chunk-LXI2JGJY.js';

import.meta.hot = createHotContext(\\"/src/App.svelte.js\\");/* src/App.svelte generated by Svelte v3.48.0 */
const file = \\"src/App.svelte\\";

function create_fragment(ctx) {
	let main;
	let img;
	let img_src_value;
	let t0;
	let h1;
	let t2;
	let counter;
	let t3;
	let p0;
	let t4;
	let a0;
	let t6;
	let t7;
	let p1;
	let t8;
	let a1;
	let t10;
	let current;
	counter = new Counter({ $$inline: true });

	const block = {
		c: function create() {
			main = element(\\"main\\");
			img = element(\\"img\\");
			t0 = space();
			h1 = element(\\"h1\\");
			h1.textContent = \\"Hello world!\\";
			t2 = space();
			create_component(counter.$$.fragment);
			t3 = space();
			p0 = element(\\"p\\");
			t4 = text(\\"Visit \\");
			a0 = element(\\"a\\");
			a0.textContent = \\"svelte.dev\\";
			t6 = text(\\" to learn how to build Svelte\\\\n    apps.\\");
			t7 = space();
			p1 = element(\\"p\\");
			t8 = text(\\"Check out \\");
			a1 = element(\\"a\\");
			a1.textContent = \\"SvelteKit\\";
			t10 = text(\\" for\\\\n    the officially supported framework, also powered by Vite!\\");
			if (!src_url_equal(img.src, img_src_value = logo)) attr_dev(img, \\"src\\", img_src_value);
			attr_dev(img, \\"alt\\", \\"Svelte Logo\\");
			attr_dev(img, \\"class\\", \\"s-XsEmFtvddWTw\\");
			add_location(img, file, 6, 2, 115);
			attr_dev(h1, \\"class\\", \\"s-XsEmFtvddWTw\\");
			add_location(h1, file, 7, 2, 154);
			attr_dev(a0, \\"href\\", \\"https://svelte.dev\\");
			attr_dev(a0, \\"class\\", \\"s-XsEmFtvddWTw\\");
			add_location(a0, file, 12, 10, 208);
			attr_dev(p0, \\"class\\", \\"s-XsEmFtvddWTw\\");
			add_location(p0, file, 11, 2, 194);
			attr_dev(a1, \\"href\\", \\"https://github.com/sveltejs/kit#readme\\");
			attr_dev(a1, \\"class\\", \\"s-XsEmFtvddWTw\\");
			add_location(a1, file, 17, 14, 319);
			attr_dev(p1, \\"class\\", \\"s-XsEmFtvddWTw\\");
			add_location(p1, file, 16, 2, 301);
			attr_dev(main, \\"class\\", \\"s-XsEmFtvddWTw\\");
			add_location(main, file, 5, 0, 106);
		},
		l: function claim(nodes) {
			throw new Error(\\"options.hydrate only works if the component was compiled with the \`hydratable: true\` option\\");
		},
		m: function mount(target, anchor) {
			insert_dev(target, main, anchor);
			append_dev(main, img);
			append_dev(main, t0);
			append_dev(main, h1);
			append_dev(main, t2);
			mount_component(counter, main, null);
			append_dev(main, t3);
			append_dev(main, p0);
			append_dev(p0, t4);
			append_dev(p0, a0);
			append_dev(p0, t6);
			append_dev(main, t7);
			append_dev(main, p1);
			append_dev(p1, t8);
			append_dev(p1, a1);
			append_dev(p1, t10);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(counter.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(counter.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(main);
			destroy_component(counter);
		}
	};

	dispatch_dev(\\"SvelteRegisterBlock\\", {
		block,
		id: create_fragment.name,
		type: \\"component\\",
		source: \\"\\",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('App', slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(\`<App> was created with unknown prop '\${key}'\`);
	});

	$$self.$capture_state = () => ({ logo, Counter });
	return [];
}

class App extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev(\\"SvelteRegisterComponent\\", {
			component: this,
			tagName: \\"App\\",
			options,
			id: create_fragment.name
		});
	}
}
if (import.meta && import.meta.hot) { if (false) import.meta.hot.accept();; App = applyHmr({ m: import.meta, id: \\"<root>/src/App.svelte\\", hotOptions: {\\"preserveLocalState\\":false,\\"noPreserveStateKey\\":[\\"@hmr:reset\\",\\"@!hmr\\"],\\"preserveAllLocalStateKey\\":\\"@hmr:keep-all\\",\\"preserveLocalStateKey\\":\\"@hmr:keep\\",\\"noReload\\":false,\\"optimistic\\":false,\\"acceptNamedExports\\":true,\\"acceptAccessors\\":true,\\"injectCss\\":false,\\"cssEjectDelay\\":100,\\"native\\":false,\\"importAdapterName\\":\\"___SVELTE_HMR_HOT_API_PROXY_ADAPTER\\",\\"noOverlay\\":true,\\"allowLiveBinding\\":false}, Component: App, ProxyAdapter: adapter, acceptable: true, preserveLocalState: false, emitCss: true, }); }
var App$1 = App;

export { App$1 as default };
"
`;

exports[`serve fs output: src/App.svelte.style.js 1`] = `
"import { createHotContext, updateStyle, removeStyle } from '../vendor/vite-client.mjs.js';

import.meta.hot = createHotContext(\\"/src/App.svelte.style.js\\");const __vite__id = \\"<root>/src/App.svelte?svelte&type=style&lang.css\\";
const __vite__css = \\":root{font-family:-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,\\\\n      Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif}main.s-XsEmFtvddWTw{text-align:center;padding:1em;margin:0 auto}img.s-XsEmFtvddWTw{height:16rem;width:16rem}h1.s-XsEmFtvddWTw{color:#ff3e00;text-transform:uppercase;font-size:4rem;font-weight:100;line-height:1.1;margin:2rem auto;max-width:14rem}p.s-XsEmFtvddWTw{max-width:14rem;margin:1rem auto;line-height:1.35}@media(min-width: 480px){h1.s-XsEmFtvddWTw{max-width:none}p.s-XsEmFtvddWTw{max-width:none}}.s-XsEmFtvddWTw{}\\";
updateStyle(__vite__id, __vite__css);
import.meta.hot.accept();
import.meta.hot.prune(() => removeStyle(__vite__id));

export { __vite__css as default };
"
`;

exports[`serve fs output: src/assets/svelte.png.js 1`] = `
"var logo = \\"/src/assets/svelte.png\\";

export { logo as default };
"
`;

exports[`serve fs output: src/content.js 1`] = `
"import App from './App.svelte.js';

const html = \`<div id=\\"crx-app\\"></div>\`;
const target = new DOMParser().parseFromString(html, 'text/html').body
  .firstElementChild;
document.body.append(target);

const app = new App({ target });

export { app as default };
"
`;

exports[`serve fs output: src/lib/Counter.svelte.js 1`] = `
"import { createHotContext } from '../../vendor/vite-client.mjs.js';
import '../../vendor/deps/svelte_internal.js';
import { applyHmr } from '../../vendor/svelte-hmr-runtime-hot-api-esm.js';
import { adapter } from '../../vendor/svelte-hmr-runtime-proxy-adapter-dom.js';
import './Counter.svelte.style.js';
import { element, text, attr_dev, add_location, insert_dev, append_dev, listen_dev, set_data_dev, noop, detach_dev, dispatch_dev, validate_slots, SvelteComponentDev, init, safe_not_equal } from '../../vendor/deps/chunk-LXI2JGJY.js';

import.meta.hot = createHotContext(\\"/src/lib/Counter.svelte.js\\");/* src/lib/Counter.svelte generated by Svelte v3.48.0 */

const file = \\"src/lib/Counter.svelte\\";

function create_fragment(ctx) {
	let button;
	let t0;
	let t1;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			button = element(\\"button\\");
			t0 = text(\\"Clicks: \\");
			t1 = text(/*count*/ ctx[0]);
			attr_dev(button, \\"class\\", \\"s-lXDMeZ-gXAhl\\");
			add_location(button, file, 7, 0, 83);
		},
		l: function claim(nodes) {
			throw new Error(\\"options.hydrate only works if the component was compiled with the \`hydratable: true\` option\\");
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, t0);
			append_dev(button, t1);

			if (!mounted) {
				dispose = listen_dev(button, \\"click\\", /*increment*/ ctx[1], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*count*/ 1) set_data_dev(t1, /*count*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev(\\"SvelteRegisterBlock\\", {
		block,
		id: create_fragment.name,
		type: \\"component\\",
		source: \\"\\",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Counter', slots, []);
	let count = 0;

	const increment = () => {
		$$invalidate(0, count += 1);
	};

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(\`<Counter> was created with unknown prop '\${key}'\`);
	});

	$$self.$capture_state = () => ({ count, increment });

	$$self.$inject_state = $$props => {
		if ('count' in $$props) $$invalidate(0, count = $$props.count);
	};

	if ($$props && \\"$$inject\\" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [count, increment];
}

class Counter extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev(\\"SvelteRegisterComponent\\", {
			component: this,
			tagName: \\"Counter\\",
			options,
			id: create_fragment.name
		});
	}
}
if (import.meta && import.meta.hot) { if (false) import.meta.hot.accept();; Counter = applyHmr({ m: import.meta, id: \\"<root>/src/lib/Counter.svelte\\", hotOptions: {\\"preserveLocalState\\":false,\\"noPreserveStateKey\\":[\\"@hmr:reset\\",\\"@!hmr\\"],\\"preserveAllLocalStateKey\\":\\"@hmr:keep-all\\",\\"preserveLocalStateKey\\":\\"@hmr:keep\\",\\"noReload\\":false,\\"optimistic\\":false,\\"acceptNamedExports\\":true,\\"acceptAccessors\\":true,\\"injectCss\\":false,\\"cssEjectDelay\\":100,\\"native\\":false,\\"importAdapterName\\":\\"___SVELTE_HMR_HOT_API_PROXY_ADAPTER\\",\\"noOverlay\\":true,\\"allowLiveBinding\\":false}, Component: Counter, ProxyAdapter: adapter, acceptable: true, preserveLocalState: false, emitCss: true, }); }
var Counter$1 = Counter;

export { Counter$1 as default };
"
`;

exports[`serve fs output: src/lib/Counter.svelte.style.js 1`] = `
"import { createHotContext, updateStyle, removeStyle } from '../../vendor/vite-client.mjs.js';

import.meta.hot = createHotContext(\\"/src/lib/Counter.svelte.style.js\\");const __vite__id = \\"<root>/src/lib/Counter.svelte?svelte&type=style&lang.css\\";
const __vite__css = \\"button.s-lXDMeZ-gXAhl{font-family:inherit;font-size:inherit;padding:1em 2em;color:#ff3e00;background-color:rgba(255, 62, 0, 0.1);border-radius:2em;border:2px solid rgba(255, 62, 0, 0);outline:none;width:200px;font-variant-numeric:tabular-nums;cursor:pointer}button.s-lXDMeZ-gXAhl:focus{border:2px solid #ff3e00}button.s-lXDMeZ-gXAhl:active{background-color:rgba(255, 62, 0, 0.2)}.s-lXDMeZ-gXAhl{}\\";
updateStyle(__vite__id, __vite__css);
import.meta.hot.accept();
import.meta.hot.prune(() => removeStyle(__vite__id));

export { __vite__css as default };
"
`;

exports[`serve fs output: src/popup.html 1`] = `
"<!DOCTYPE html>
<html lang=\\"en\\">
  <head>
    <title>Waiting for the extension service worker...</title>
    <script src=\\"/assets/precontroller.js.js\\"></script>
  </head>
  <body>
    <h1>Waiting for service worker</h1>

    <p>
      If you see this message, it means the service worker has not loaded fully.
    </p>

    <p>This page is never added in production.</p>
  </body>
</html>
"
`;
